{
	"map": {
		"entities": "entities",
		"basic": "basic"
	},
	"filename": "src/app/services/socket.service.ts",
    "formatUsing": "typescript"
}
---
import { Injectable } from "@angular/core";
import { Socket } from "ngx-socket-io";
import { Subject } from "rxjs";
import { HttpService } from "./http.service";

@Injectable()
export class SocketService {
    tables: string[] = [];
    allChanges = new Subject();
    subjects: any = {
    {{#each entities}}
    {{camelCase name}}: new Subject(),
    {{/each}}
    };

    constructor(private socket: Socket, private http: HttpService) {
        this.initializeApp();
    }

    private initializeApp(): void {
        this.getTables();
        this.socket.on("connect", () => {
            console.log("connected to server");
        });
        this.socket.on("disconnect", () => {
            console.log("disconnected from server");
        });
        this.socket.on("msgFromServer", (data: any) => {
            this.allChanges.next(data.entity);
            if (data.entity && this.tables.includes(data.entity)) {
                this.subjects[data.entity].next(data.message);
            }
        });
    }

    public subscribeToTable(table: string): Subject<any> {
        return this.subjects[table];
    }

    public subscribeToAllChanges(): Subject<any> {
        return this.allChanges;
    }

    private async getTables(): Promise<void> {
        this.http.getTables().then((data: any) => {
            this.tables = data;
        });
    }
}