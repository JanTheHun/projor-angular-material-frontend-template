{
    "forEach": "entities",
    "filename": "src/app/components/entities/{{kebabCase name}}/{{kebabCase name}}-form/{{kebabCase name}}-form.component.ts",
    "formatUsing": "typescript"
}
---
import { Component, OnInit } from '@angular/core';
import { HttpService } from "../../../../services/http.service";
import { Router, ActivatedRoute } from "@angular/router";
import { AppService } from "../../../../app.service";
import { FormGroup, FormControl } from '@angular/forms';

@Component({
  selector: 'app-{{kebabCase name}}-form',
  templateUrl: './{{kebabCase name}}-form.component.html',
  styleUrl: './{{kebabCase name}}-form.component.scss'
})
export class {{pascalCase name}}FormComponent implements OnInit {
  editMode: boolean = true
  entityId: string | null = null

  {{kebabCase name}}Form = new FormGroup({
    {{#each attributes}}
    {{camelCase name}}: new FormControl(''),
    {{/each}}
    {{#each associations}}
    {{camelCase name}}Id: new FormControl(''),
    {{/each}}
  });

  constructor(
      private httpService: HttpService,
      private router: Router,
      private route: ActivatedRoute,
      private appService: AppService
  ) {}

  ngOnInit() {
    this.entityId = this.route.snapshot.params['id']
    if (!this.entityId) {
      this.editMode = false;
      return
    }
    this.httpService.getRequest("{{kebabCase name}}", this.entityId)
      .then((data: any) => {
        if (data) {
          this.{{camelCase name}}Form.patchValue(data);
          this.editMode = true;
        }
      })
      .catch(_ => {
        this.appService.openErrorSnackBar('Could not load entities')
      })
  }

  public onSave(): void {
    this.httpService.postRequest("{{kebabCase name}}", this.{{kebabCase name}}Form.value, this.entityId)
      .then(_ => {
        this.appService.openConfirmSnackBar('Entity saved')
        this.router.navigate(["/{{kebabCase name}}"])
      })
      .catch(_ => {
        this.appService.openErrorSnackBar('Could not save entity')
      })
  }

  public onDelete(): void {
    this.httpService.deleteRequest("{{kebabCase name}}", this.entityId)
      .then(_ => {
        this.appService.openConfirmSnackBar('Entity deleted')
        this.router.navigate(["/{{kebabCase name}}"])
      })
      .catch(_ => {
        this.appService.openErrorSnackBar('Could not delete entity')
      })
  }
}